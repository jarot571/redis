name: Node.js API Test Pipeline with Curl

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-api:
    runs-on: ubuntu-latest

    # The Redis service container is automatically on a private network.
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --name test-redis-server

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build and run application container
        # Run the app container on the same network as the services.
        run: |
          docker build -t my-app .
          docker run \
            -d \
            --name app-node \
            -e REDIS_HOST=redis \
            --network ${{ job.services.redis.network }} \
            my-app

      - name: Wait for services to be ready
        run: sleep 10

      - name: Run API tests from a separate container
        # This step runs on an Ubuntu container on the same network.
        # This allows it to resolve 'app-node' by name.
        container:
          image: ubuntu:22.04
          env:
            # Set the PATH to include curl, which is not in the default path.
            PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        
        run: |
          # Install curl inside this temporary container.
          apt-get update && apt-get install -y curl
          
          echo "--- Testing successful transaction ---"
          # Now, the 'app-node' host name is resolvable.
          API_URL="http://app-node:3000/api/x-transaction-redis"
          TRANSACTION_ID="github-action-test-1234"
          
          RESPONSE=$(curl -s -X POST $API_URL \
            -H "Content-Type: application/json" \
            -H "x-transaction-id: $TRANSACTION_ID" \
            -d '{"message":"First test request"}'
          )
          echo "First response: $RESPONSE"
          
          if [[ $RESPONSE == *\"status\":\"00 Success\"* ]]; then
            echo "Test 1 Passed: New transaction successful."
          else
            echo "Test 1 Failed: Expected success, got '$RESPONSE'"
            exit 1
          fi
          
          echo "--- Testing duplicate transaction ---"
          RESPONSE=$(curl -s -X POST $API_URL \
            -H "Content-Type: application/json" \
            -H "x-transaction-id: $TRANSACTION_ID" \
            -d '{"message":"Second test request"}'
          )
          echo "Second response: $RESPONSE"
          
          if [[ $RESPONSE == *\"error_code\":\"40002\"* ]]; then
            echo "Test 2 Passed: Duplicate transaction correctly blocked."
          else
            echo "Test 2 Failed: Expected duplicate error, got '$RESPONSE'"
            exit 1
          fi

      - name: Cleanup containers
        if: always()
        run: |
          docker stop app-node
