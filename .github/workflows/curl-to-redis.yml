name: Node.js API Test Redis

on:
  push:
    branches:
      - realease-001
  pull_request:
    branches:
      - realease-001

jobs:
  test-api:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:5.0
        ports:
          - 6379:6379
        options: >-
          --name test-redis-server
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Wait for Redis service to be ready
        run: |
          echo "Waiting for Redis to be healthy..."
          for i in $(seq 1 10); do
            if docker exec test-redis-server redis-cli ping | grep -q PONG; then
              echo "✅ Redis is up and running!"
              exit 0
            fi
            echo "⏳ Attempt $i failed. Waiting 5 seconds..."
            sleep 5
          done
          echo "❌ Redis failed to start after multiple attempts."
          exit 1

      - name: Build application Docker image (Node 10.19.0-alpine)
        run: |
          docker build \
            --build-arg NODE_VERSION=10.19.0-alpine \
            -t my-app .

      - name: Start application container
        run: |
          docker run \
            -d \
            --name app-node \
            --network host \
            -e REDIS_HOST=127.0.0.1 \
            -p 3000:3000 \
            my-app

      - name: Run API tests with retry
        run: |
          set -euo pipefail
          echo "Waiting for app-node to be ready..."

          API_URL="http://127.0.0.1:3000/api/x-transaction-redis"
          API_BYPASS_URL="http://127.0.0.1:3000/api/bypass"

          MAX_ATTEMPTS=30
          for i in $(seq 1 $MAX_ATTEMPTS); do
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$API_URL" || true)
            if [[ "$HTTP_CODE" =~ ^2[0-9]{2}$ || "$HTTP_CODE" =~ ^3[0-9]{2}$ ]]; then
              echo "✅ App is ready (status: $HTTP_CODE)"
              break
            fi
            echo "⏳ Attempt $i/$MAX_ATTEMPTS: App not ready (status: $HTTP_CODE), retrying..."
            sleep 2
            if [[ "$i" -eq "$MAX_ATTEMPTS" ]]; then
              echo "❌ App failed to start in time"
              docker logs app-node || true
              exit 1
            fi
          done

          call_api() {
            local url="$1"
            local resp
            if ! resp=$(curl -s -X POST "$url" \
              -H "Content-Type: application/json" \
              -H "x-transaction-id: 2025-08-13" \
              -d '{"message":"Test from CI/CD"}'); then
              echo "❌ Failed to connect to $url"
              exit 1
            fi
            echo "Response from $url: $resp"
          }

          call_api "$API_URL"
          call_api "$API_URL"
          call_api "$API_URL"
          call_api "$API_BYPASS_URL"
          call_api "$API_BYPASS_URL"
          call_api "$API_BYPASS_URL"

      - name: Cleanup containers
        if: always()
        run: |
          docker stop app-node
          docker rm app-node
