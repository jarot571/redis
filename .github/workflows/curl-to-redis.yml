name: Node.js API Test Redis

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-api:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --name test-redis-server
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Wait for Redis service to be ready
        run: |
          # Use a loop with redis-cli to check for the PONG response
          echo "Waiting for Redis to be healthy..."
          for i in $(seq 1 10); do
            if docker exec test-redis-server redis-cli ping | grep -q PONG; then
              echo "Redis is up and running!"
              exit 0
            fi
            echo "Attempt $i failed. Waiting 5 seconds..."
            sleep 5
          done
          echo "Redis service failed to start after multiple attempts."
          exit 1
      
      - name: Build application Docker image
        run: docker build -t my-app .

      - name: Start application container
        run: |
          docker run \
            -d \
            --name app-node \
            --network host \
            -e REDIS_HOST=127.0.0.1 \
            -p 3000:3000 \
            my-app

      - name: Run API tests with Curl
        run: |
          echo "Waiting for app-node to be ready..."
          sleep 10
          
          API_URL="http://127.0.0.1:3000/api/x-transaction-redis"
          
          echo "--- Testing POST request to $API_URL ---"
          
          RESPONSE=$(curl -s -X POST $API_URL \
            -H "Content-Type: application/json" \
            -H "x-transaction-id: simple-test" \
            -d '{"message":"Hello from CI/CD"}' \
          )
          
          echo "API Response: $RESPONSE"
          
          # Use the correct regular expression syntax for the conditional
          if [[ $RESPONSE =~ \"status\":\"00 Success\" ]]; then
            echo "Test Passed: API returned the expected success status."
          else
            echo "Test Failed: Expected '00 Success', got '$RESPONSE'"
            exit 1
          fi

      - name: Cleanup containers
        if: always()
        run: |
          docker stop app-node
          docker rm app-node