name: Node.js API Test Redis

on:
  push:
    branches:
      - realease-001
  pull_request:
    branches:
      - realease-001

jobs:
  test-api:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:5.0
        ports:
          - 6379:6379
        options: >-
          --name test-redis-server
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Wait for Redis service to be ready
        run: |
          echo "Waiting for Redis to be healthy..."
          for i in $(seq 1 10); do
            if docker exec test-redis-server redis-cli ping | grep -q PONG; then
              echo "Redis is up and running!"
              exit 0
            fi
            echo "Attempt $i failed. Waiting 5 seconds..."
            sleep 5
          done
          echo "Redis service failed to start after multiple attempts."
          exit 1

      - name: Build application Docker image
        run: docker build -t my-app .

      - name: Start application container
        run: |
          docker run -d \
            --name app-node \
            --network host \
            -e REDIS_HOST=127.0.0.1 \
            -p 3000:3000 \
            my-app

      - name: Wait for app to be ready
        run: |
          echo "Waiting for app-node to be ready..."
          for i in $(seq 1 15); do
            if curl -s http://127.0.0.1:3000/api/x-transaction-redis >/dev/null 2>&1; then
              echo "App is ready!"
              exit 0
            fi
            echo "Attempt $i failed. Waiting 2 seconds..."
            sleep 2
          done
          echo "App failed to start"
          exit 1

      - name: Run API tests with Curl
        run: |
          send_request() {
            local url="$1"
            local num="$2"
            echo "--- Sending request #$num to $url ---"

            RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST "$url" \
              -H "Content-Type: application/json" \
              -H "x-transaction-id: 2025-08-13" \
              -d '{"message":"Test from CI/CD"}' || echo "CURL_ERROR")

            if [ "$RESPONSE" = "CURL_ERROR" ]; then
              echo "❌ API-req-$num: Curl command failed"
              return
            fi

            BODY=$(echo "$RESPONSE" | sed -e 's/HTTPSTATUS\:.*//g')
            STATUS=$(echo "$RESPONSE" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

            if [[ "$STATUS" =~ ^[0-9]+$ ]]; then
              if [ "$STATUS" -ge 200 ] && [ "$STATUS" -lt 300 ]; then
                echo "✅ API-req-$num Success: $BODY"
              else
                echo "❌ API-req-$num Failed (HTTP $STATUS): $BODY"
              fi
            else
              echo "❌ API-req-$num Failed (HTTP $STATUS): $BODY"
            fi
          }

          API_URL="http://127.0.0.1:3000/api/x-transaction-redis"
          API_BYPASS_URL="http://127.0.0.1:3000/api/bypass"

          echo "--- Testing POST requests to $API_URL ---"
          for i in 1 2 3; do
            send_request "$API_URL" "$i"
          done

          echo "--- Testing POST requests to $API_BYPASS_URL ---"
          for i in 4 5 6; do
            send_request "$API_BYPASS_URL" "$i"
          done

      - name: Cleanup containers
        if: always()
        run: |
          docker stop app-node || true
          docker rm app-node || true
